package ulduar

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/rdsdata"
)

/*
	Creates table using provided struct. If tableName isn't provided, the
	name of the table will be generated by snake casing struct name. All types will
	be based off AWS Aurora PostgreSQL. All values will require `datapi` struct tags to identify
	name of column.
		int, int32, int64 == bigint
		float32, float64 == numeric
		string == text
		time.Time == timestamp with time zone
		bool == boolean
*/
func (da *DataApi) CreateTable(t *Table) error {

	sql, err := GenerateCreateTableSqlWithStruct(t.Options)
	if err != nil {
		return err
	}

	params := &rdsdata.ExecuteStatementInput{
		ResourceArn: da.ResourceArn,
		SecretArn:   da.SecretArn,
		Sql:         &sql,
		Database:    da.DbName,
	}

	_, err = da.RDSClient.ExecuteStatement(context.TODO(), params)
	if err != nil {
		return err
	}

	return nil
}

/*
	Function that drops provided table using DataApi.
*/
func (da *DataApi) DropTable(t *Table) error {

	sql, err := GenerateDropTableSql([]string{*t.Options.TableName}...)
	if err != nil {
		return err
	}

	params := &rdsdata.ExecuteStatementInput{
		ResourceArn: da.ResourceArn,
		SecretArn:   da.SecretArn,
		Sql:         &sql,
		Database:    da.DbName,
	}

	_, err = da.RDSClient.ExecuteStatement(context.TODO(), params)
	if err != nil {
		return err
	}

	return nil
}

/*
	Function that drops provided tables using AWS DataApi
*/
func (da *DataApi) DropTables(tableNames []string) error {

	sql, err := GenerateDropTableSql(tableNames...)
	if err != nil {
		return err
	}

	params := &rdsdata.ExecuteStatementInput{
		ResourceArn: da.ResourceArn,
		SecretArn:   da.SecretArn,
		Sql:         &sql,
		Database:    da.DbName,
	}

	_, err = da.RDSClient.ExecuteStatement(context.TODO(), params)
	if err != nil {
		return err
	}

	return nil
}
